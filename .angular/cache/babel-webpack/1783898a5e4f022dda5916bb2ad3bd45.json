{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport Swal from 'sweetalert2';\nlet KmeansWekaComponent = class KmeansWekaComponent {\n  constructor(formbuilder, machineLearningService, _sanitizer) {\n    this.formbuilder = formbuilder;\n    this.machineLearningService = machineLearningService;\n    this._sanitizer = _sanitizer;\n    this.searchCluster = '';\n    this.showForm = true;\n    this.showResults = false;\n    this.form = this.formbuilder.group({});\n    this.page = 1;\n  }\n\n  showMore(i) {\n    var _a;\n\n    let centroid = (_a = this.response) === null || _a === void 0 ? void 0 : _a.centroids[i];\n    let pointCols = '';\n    centroid === null || centroid === void 0 ? void 0 : centroid.point.forEach((point, index) => {\n      pointCols += `<p style=\"font-weight:bold\">Punto ${index + 1}: ${parseFloat(point).toFixed(2)}</p></b>`;\n    });\n    let swal_html = `<b><div class=\"panel\" style=\"background:aliceblue;font-weight:bold\">\n    <div class=\"panel-heading panel-info text-center btn-info\"><b>Puntos</b></div>\n    <div class=\"panel-body\"><div class=\"text-center\">\n    ${pointCols}\n    </div></div>\n    <div class=\"panel-heading panel-info text-center btn-info\"><b>Distancia</b></div>\n    <div class=\"panel-body\"><div class=\"text-center\">\n    <b><p style=\"font-weight:bold\">Distancia: ${parseFloat(centroid === null || centroid === void 0 ? void 0 : centroid.distance).toFixed(3)}</p></b>\n    </div></div>\n    </div>`;\n    Swal.fire({\n      title: \"Coordenadas\",\n      html: swal_html\n    });\n  }\n\n  autoGrowTextZone(e) {\n    e.target.style.height = \"0px\";\n    e.target.style.height = e.target.scrollHeight + 25 + \"px\";\n  }\n\n  ngOnInit() {\n    // this.machineLearningService.getData().subscribe((msg:any)=>{\n    //   console.log(msg);\n    // });\n    this.sendData();\n  }\n\n  sendData() {\n    this.form = this.formbuilder.group({\n      query: [\"select o.htitulo_cat, o.htitulo, w.pagina_web, o.empresa, o.lugar, o.salario, date_part('year',o.fecha_publicacion) as periodo, f_dimPuestoEmpleo(o.id_oferta,7) as funciones, f_dimPuestoEmpleo(o.id_oferta,1) as conocimiento, f_dimPuestoEmpleo(o.id_oferta,3) as habilidades, f_dimPuestoEmpleo(o.id_oferta,2) as competencias, f_dimPuestoEmpleo(o.id_oferta,17) as certificaciones, f_dimPuestoEmpleo(o.id_oferta,5) as beneficio, f_dimPuestoEmpleo(o.id_oferta,11) as formacion from webscraping w inner join oferta o on (w.id_webscraping=o.id_webscraping) where o.id_estado is null;\", [Validators.required, Validators.minLength(0)]],\n      // columns: ['', [Validators.required, Validators.minLength(0)]],\n      n_clusters: [5, [Validators.required, Validators.min(1)]],\n      init: ['', [Validators.required, Validators.minLength(0)]],\n      max_iter: [500, [Validators.required, Validators.min(1)]]\n    });\n  }\n\n  runKmeans() {\n    if (this.form.invalid) {\n      Swal.fire({\n        title: '¡Llene todos los campos correctamente!',\n        icon: 'warning' // allowOutsideClick: false\n\n      });\n      return;\n    }\n\n    Swal.fire({\n      title: 'Cargando ...' // allowOutsideClick: false\n\n    });\n    Swal.showLoading(); //let column_1 = this.form.get('column_1')?.value;\n    //let column_2 = this.form.get('column_2')?.value;\n    //let columns= [];\n    //columns.push(column_1, column_2);\n    //this.form.controls[\"columns\"].setValue(columns);\n\n    this.machineLearningService.runKmeans(this.form.value).subscribe(result => {\n      Swal.close();\n      this.showResults = true;\n      this.response = result;\n      this.data = result === null || result === void 0 ? void 0 : result.data.data;\n      this.columns = result === null || result === void 0 ? void 0 : result.columns.filter(item => item !== \"cluster\");\n      let no_sorted_clusters = result === null || result === void 0 ? void 0 : result.clusters;\n      this.clusters = no_sorted_clusters.sort((a, b) => (b === null || b === void 0 ? void 0 : b.percentage) - (a === null || a === void 0 ? void 0 : a.percentage)); //this.centroids_idx = result?.centroids.map((val:any) => val.position );\n      //this.img = 'data:image/jpg;base64,'\n      //           + this.response?.graphic;\n      //this.img_elbow = 'data:image/jpg;base64,'\n      //           + this.response?.elbow_method;\n    }, err => {\n      Swal.close();\n      Swal.fire({\n        icon: 'error',\n        title: 'Oops...',\n        text: '!Ocurrió un error!'\n      });\n    });\n  }\n\n};\nKmeansWekaComponent = __decorate([Component({\n  selector: 'app-kmeans-weka',\n  templateUrl: './kmeans_weka.component.html',\n  styleUrls: ['./kmeans_weka.component.scss']\n})], KmeansWekaComponent);\nexport { KmeansWekaComponent };","map":null,"metadata":{},"sourceType":"module"}